@using Root.Application.DTOs.CategoryDtos
@using Root.Application.DTOs.PostDtos
<!-- Destination Start -->
<div class="container-xxl py-5 destination">
    <div class="container">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title bg-white text-center text-primary px-3">Blog</h6>
            <h1 class="mb-5">O que há de novo?</h1>
        </div>
        <div class="row g-4 mt-4">
            @foreach (var post in ListPosts)
            {
                <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
                    <div class="team-item">
                        @* Pode trocar o nome da classe depois para algo como blog-post *@
                        <div class="overflow-hidden">
                            <img class="img-fluid" src="@ImageDataUrl(post.Image)" alt="Imagem da postagem">
                        </div>
                        <div class="text-center p-4">
                            <h5 class="mb-2">@post.Title</h5>
                            <p class="d-flex">
                                @foreach (var cat in post.CategoryNames)
                                {
                                    <span class="badge bg-primary rounded-pill px-2">
                                        <span>@cat</span>
                                    </span>
                                }
                            </p>
                            <a class="btn btn-sm btn-outline-primary" href="/blog/@post.Id">Ler Artigo</a>
                        </div>
                    </div>
                </div>
            }
            @if (ListPosts.Count == 0)
            {
                <div class="d-flex w-100 justify-content-center">
                    <small>Sem postagens disponíveis</small>
                </div>
            }
        </div>
    </div>
</div>
<!-- Destination Start -->


@code {
    public List<ListPostDto> ListPosts { get; set; } = [];
    public List<ListCategoryDto> ListCategory { get; set; } = [];

    private string ImageDataUrl(string image) =>
        string.IsNullOrEmpty(image) ? "img/noImage.png" : $"data:image/png;base64,{image}";

    protected override async Task OnInitializedAsync()
    {
        ListPosts = await posts.GetAllPostsAsync();
        ListCategory = await posts.GetAllCategoriesAsync();
        StateHasChanged();
    }

}