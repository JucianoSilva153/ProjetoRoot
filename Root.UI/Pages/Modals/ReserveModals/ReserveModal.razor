@using Root.Application.DTOs.GuideDtos
@using Root.Application.DTOs.PackageDtos
@using Root.Application.DTOs.ReserveDtos
@using Root.Application.DTOs.UserDtos

<div class="modal fade" id="@ModalId" data-bs-backdrop="static" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Agendamento - @Package.Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-start">
                <div>
                    <h5 class="text-center">Está prestes a fazer um agendamento para o pacote <span
                            class="text-primary">'@Package.Name'</span>, no valor de <span
                            class="text-primary">@Package.ActivitiesPackagePrice.ToString("C")</span>!</h5>
                    <h6 class="text-center">Por favor, insira abaixo o número de participantes do pacote de turismo, e
                        data de marcação!</h6>
                </div>
                <div class="my-4 gap-2">
                    <div class="mb-3">
                        <input @bind="NewReserve.PeopleCount" 
                               type="number" 
                               placeholder="Número de pessoas"
                               class="form-control @(GetInputClass(nameof(NewReserve.PeopleCount)))"/>
                        <div class="invalid-feedback">@GetErrorMessage(nameof(NewReserve.PeopleCount))</div>
                    </div>
                    
                    <div class="mb-3">
                        <select @bind="NewReserve.GuideId" 
                                class="form-control @(GetInputClass(nameof(NewReserve.GuideId)))">
                            <option value="">Selecione um Guia</option>
                            @foreach (var guide in Guides)
                            {
                                <option value="@guide.Id">@guide.Name @guide.Surname - @guide.Description</option>
                            }
                        </select>
                        <div class="invalid-feedback">@GetErrorMessage(nameof(NewReserve.GuideId))</div>
                    </div>
                    
                    <div class="mb-3">
                        <input @bind="NewReserve.ReserveDate" 
                               type="date" 
                               placeholder="Data" 
                               class="form-control @(GetInputClass(nameof(NewReserve.ReserveDate)))"/>
                        <div class="invalid-feedback">@GetErrorMessage(nameof(NewReserve.ReserveDate))</div>
                    </div>
                </div>
                <div>
                    <small>Depois de se confirmar o agendamento, será redirecionado para sua conta e poderá verificar
                        mais detalhes sobre o pagamento!!</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="ValidateAndBook">Agendar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public ListPackageDto Package { get; set; } = new();
    [Parameter] public Guid? ClientId { get; set; }

    [CascadingParameter] public LoginListUserDto CurrentUser { get; set; } = new();
    public string ModalId => $"bookPackModal_{Package.Id}";
    public CreateReserveDto NewReserve { get; set; } = new();
    public List<ListGuidesDto> Guides { get; set; } = new();
    private Dictionary<string, string> errors = new();

    protected override async Task OnInitializedAsync()
    {
        Guides = await guides.GetAllGuidesAsync();
    }

    private string GetInputClass(string fieldName)
    {
        return errors.ContainsKey(fieldName) ? "is-invalid" : "";
    }

    private string GetErrorMessage(string fieldName)
    {
        return errors.ContainsKey(fieldName) ? errors[fieldName] : "";
    }

    private void ClearError(string fieldName)
    {
        if (errors.ContainsKey(fieldName))
        {
            errors.Remove(fieldName);
        }
    }

    private bool ValidateField(string fieldName)
    {
        switch (fieldName)
        {
            case nameof(NewReserve.PeopleCount):
                if (NewReserve.PeopleCount <= 0)
                {
                    errors[fieldName] = "Por favor, insira um número válido de participantes";
                    return false;
                }
                return true;

            case nameof(NewReserve.GuideId):
                if (NewReserve.GuideId == Guid.Empty)
                {
                    errors[fieldName] = "Por favor, selecione um guia turístico";
                    return false;
                }
                return true;

            case nameof(NewReserve.ReserveDate):
                if (NewReserve.ReserveDate == default)
                {
                    errors[fieldName] = "Por favor, selecione uma data válida";
                    return false;
                }
                if (NewReserve.ReserveDate < DateTime.Today)
                {
                    errors[fieldName] = "A data não pode ser anterior ao dia atual";
                    return false;
                }
                return true;

            default:
                return true;
        }
    }

    private bool ValidateForm()
    {
        bool isValid = true;
        
        isValid &= ValidateField(nameof(NewReserve.PeopleCount));
        isValid &= ValidateField(nameof(NewReserve.GuideId));
        isValid &= ValidateField(nameof(NewReserve.ReserveDate));
        
        return isValid;
    }

    private async Task ValidateAndBook()
    {
        if (ValidateForm())
        {
            await BookPackage();
        }
    }

    public async Task BookPackage()
    {
        NewReserve.PackageId = Package.Id;
        NewReserve.ClientId = CurrentUser.UserTypeId == Guid.Empty ? ClientId!.Value : CurrentUser.UserTypeId;
        NewReserve.TotalPrice = Package.PackageBasePrice + Package.ActivitiesPackagePrice;

        var result = await reserves.CreateNewReserveAsync(NewReserve);
        
        if (!result)
        {
            errors["General"] = "Ocorreu um erro ao fazer o agendamento! Por favor tente mais tarde ou entre em contacto com o apoio ao cliente!";
            return;
        }

        await JS.InvokeVoidAsync("closeModal", ModalId);
        Navigator.NavigateTo("dashboard/reserves");
    }
}