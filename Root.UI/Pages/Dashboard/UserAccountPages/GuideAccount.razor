@using Root.Application.DTOs.GuideDtos
@using Root.Application.DTOs.UserDtos

<div class="d-flex w-100 flex-row align-content-between mb-4">
    <div class="w-75 d-flex align-items-center gap-4">
        <div class="user-circle border border-2 border-primary">
            <img src="@ImageDataUrl" alt="Foto do Usuário">
        </div>
        <div>
            <h3>Minha Conta</h3>
            <small class="text-danger">@erro</small>
            <small class="text-success">@sucesso</small>
        </div>
    </div>
    <div class="d-flex justify-content-end align-items-center w-25">
        <button class="btn btn-primary rounded-pill" @onclick='ValidateAndUpdate'>
            <i class="bi bi-plus-circle"></i>
            <span>Guardar</span>
        </button>
    </div>
</div>

<div class="mb-3">
    <label for="nome" class="form-label">Nome</label>
    <input @oninput='() => ClearError(nameof(NewGuide.Name))' 
           @bind="NewGuide.Name" 
           type="text" 
           class="form-control @(GetInputClass(nameof(NewGuide.Name)))" 
           id="nome" 
           placeholder="Nome do guia">
    <div class="invalid-feedback">@GetErrorMessage(nameof(NewGuide.Name))</div>
</div>

<div class="mb-3">
    <label for="sobrenome" class="form-label">Sobrenome</label>
    <input @oninput='() => ClearError(nameof(NewGuide.Surname))' 
           @bind="NewGuide.Surname" 
           type="text" 
           class="form-control @(GetInputClass(nameof(NewGuide.Surname)))" 
           id="sobrenome" 
           placeholder="Sobrenome do guia">
    <div class="invalid-feedback">@GetErrorMessage(nameof(NewGuide.Surname))</div>
</div>

<div class="mb-3">
    <label for="descricao" class="form-label">Descrição</label>
    <textarea @oninput='() => ClearError(nameof(NewGuide.Description))' 
              @bind="NewGuide.Description" 
              class="form-control @(GetInputClass(nameof(NewGuide.Description)))" 
              id="descricao" 
              rows="3"></textarea>
    <div class="invalid-feedback">@GetErrorMessage(nameof(NewGuide.Description))</div>
</div>

<div class="mb-3 w-auto">
    <label for="localizacao" class="form-label">Localização</label>
    <input @oninput='() => ClearError(nameof(NewGuide.Location))' 
           @bind="NewGuide.Location" 
           class="form-control @(GetInputClass(nameof(NewGuide.Location)))" 
           type="text" 
           id="localizacao" 
           placeholder="Localização do guia">
    <div class="invalid-feedback">@GetErrorMessage(nameof(NewGuide.Location))</div>
</div>

<div class="mb-3">
    <label for="formFile" class="form-label">Imagem do Guia</label>
    <InputFile class='@(GetInputClass("Image"))'
               type="file" 
               id="formFile" 
               OnChange="OnInputFileChange"/>
    <div class="invalid-feedback">@GetErrorMessage("Image")</div>
</div>

<div class="mb-3">
    <label for="idioms" class="form-label">Idiomas</label>
    <div class="d-flex">
        <select @bind="CurrentIdiom" 
                id="idioms" 
                class="form-select @(GetInputClass("Idioms"))">
            <option selected value="">Selecione um idioma</option>
            <option value="Português">Português</option>
            <option value="Inglês">Inglês</option>
            <option value="Francês">Francês</option>
            <option value="Alemão">Alemão</option>
        </select>
        <button class="btn btn-primary" @onclick="AddIdiom">
            <i class="bi bi-plus-circle-fill"></i>
        </button>
    </div>
    <ol class="list-group list-group-numbered">
        @foreach (var idiom in NewGuide.Idioms ?? [])
        {
            <li class="list-group-item d-flex align-items-center justify-content-between align-items-start">
                <div class="ms-2 me-auto">
                    <div class="fw-bold">@idiom</div>
                </div>
                <button class="btn" @onclick="() => { RemoveIdiom(idiom); }">
                    <i class="bi bi-x"></i>
                </button>
            </li>
        }
    </ol>
    <div class="invalid-feedback">@GetErrorMessage("Idioms")</div>
</div>

@code {
    [Parameter] public Action OnGuideCreated { get; set; }
    [Parameter] public Guid CurrentUserSpecificId { get; set; }
    public string erro { get; set; } = "";
    public string sucesso { get; set; } = "";
    public ListGuidesDto OldGuide { get; set; } = new();
    public ListGuidesDto NewGuide { get; set; } = new();
    private Dictionary<string, string> errors = new();
    
    private string ImageDataUrl =>
        $"data:image/png;base64,{NewGuide.Image}";

    public string CurrentIdiom { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var getGuide = await guides.GetGuideByIdAsync(CurrentUserSpecificId);
        NewGuide = getGuide ?? new();
        OldGuide = new ListGuidesDto
        {
            Id = getGuide?.Id ?? new Guid(),
            Name = getGuide?.Name ?? "",
            Surname = getGuide?.Surname ?? "",
            Description = getGuide?.Description,
            Location = getGuide?.Location,
            Idioms = getGuide?.Idioms?.ToList(),
            Image = getGuide?.Image,
            UserId = getGuide?.UserId ?? new Guid(),
            UserName = getGuide?.UserName ?? ""
        };
    }

    private string GetInputClass(string fieldName)
    {
        return errors.ContainsKey(fieldName) ? "is-invalid" : "";
    }

    private string GetErrorMessage(string fieldName)
    {
        return errors.ContainsKey(fieldName) ? errors[fieldName] : "";
    }

    private void ClearError(string fieldName)
    {
        if (errors.ContainsKey(fieldName))
        {
            errors.Remove(fieldName);
            erro = "";
        }
    }

    private bool ValidateField(string fieldName)
    {
        switch (fieldName)
        {
            case nameof(NewGuide.Name):
                if (string.IsNullOrWhiteSpace(NewGuide.Name))
                {
                    errors[fieldName] = "Por favor, informe o nome do guia";
                    return false;
                }
                if (NewGuide.Name.Length < 2)
                {
                    errors[fieldName] = "O nome deve ter pelo menos 2 caracteres";
                    return false;
                }
                return true;

            case nameof(NewGuide.Surname):
                if (string.IsNullOrWhiteSpace(NewGuide.Surname))
                {
                    errors[fieldName] = "Por favor, informe o sobrenome do guia";
                    return false;
                }
                return true;

            case nameof(NewGuide.Description):
                if (string.IsNullOrWhiteSpace(NewGuide.Description))
                {
                    errors[fieldName] = "Por favor, informe a descrição do guia";
                    return false;
                }
                if (NewGuide.Description.Length < 10)
                {
                    errors[fieldName] = "A descrição deve ter pelo menos 10 caracteres";
                    return false;
                }
                return true;

            case nameof(NewGuide.Location):
                if (string.IsNullOrWhiteSpace(NewGuide.Location))
                {
                    errors[fieldName] = "Por favor, informe a localização do guia";
                    return false;
                }
                return true;

            case "Idioms":
                if (NewGuide.Idioms == null || NewGuide.Idioms.Count == 0)
                {
                    errors[fieldName] = "Por favor, adicione pelo menos um idioma";
                    return false;
                }
                return true;

            case "Image":
                if (string.IsNullOrWhiteSpace(NewGuide.Image))
                {
                    errors[fieldName] = "Por favor, adicione uma imagem para o guia";
                    return false;
                }
                return true;

            default:
                return true;
        }
    }

    private bool ValidateForm()
    {
        bool isValid = true;
        
        isValid &= ValidateField(nameof(NewGuide.Name));
        isValid &= ValidateField(nameof(NewGuide.Surname));
        isValid &= ValidateField(nameof(NewGuide.Description));
        isValid &= ValidateField(nameof(NewGuide.Location));
        isValid &= ValidateField("Idioms");
        isValid &= ValidateField("Image");
        
        return isValid;
    }

    private async Task ValidateAndUpdate()
    {
        if (ValidateForm())
        {
            await UpdateNewGuide();
        }
    }

    private async Task UpdateNewGuide()
    {
        var guideToUpdate = new UpdateGuideDto
        {
            Id = NewGuide.Id,
            Description = NewGuide.Description == OldGuide.Description ? null : NewGuide.Description,
            Location = NewGuide.Location == OldGuide.Location ? null : NewGuide.Location,
            Name = NewGuide.Name == OldGuide.Name ? null : NewGuide.Name,
            Idioms = NewGuide.Idioms == OldGuide.Idioms ? null : NewGuide.Idioms,
            Surname = NewGuide.Surname == OldGuide.Surname ? null : NewGuide.Surname,
            Image = NewGuide.Image == OldGuide.Image ? null : NewGuide.Image
        };
        
        var result = await guides.UpdateGuideAsync(guideToUpdate);
        if (!result)
        {
            errors["General"] = "Ocorreu um erro ao tentar atualizar o guia!";
            StateHasChanged();
            return;
        }

        await OnInitializedAsync();
        sucesso = "Dados atualizados com sucesso!";
        StateHasChanged();
    }

    private void AddIdiom()
    {
        if (string.IsNullOrEmpty(CurrentIdiom))
        {
            errors["Idioms"] = "Por favor, selecione um idioma!";
            StateHasChanged();
            return;
        }

        if (NewGuide.Idioms is null)
            NewGuide.Idioms = [];

        if (!NewGuide.Idioms.Contains(CurrentIdiom))
            NewGuide.Idioms.Add(CurrentIdiom);

        ClearError("Idioms");
    }

    private void RemoveIdiom(string idiom)
    {
        if (NewGuide.Idioms!.Contains(idiom))
            NewGuide.Idioms.Remove(idiom);
    }

    private async void OnInputFileChange(InputFileChangeEventArgs obj)
    {
        IBrowserFile file = obj.File;
        var buffer = new byte[file.Size];

        using var stream = file.OpenReadStream();
        await stream.ReadAsync(buffer);

        NewGuide.Image = Convert.ToBase64String(buffer);
        ClearError("Image");
    }
}