@layout DashboardLayout
@page "/dashboard"
@using System.Text.Json
@using Root.Application.DTOs.AdminDtos
@using Root.Application.DTOs.ClientDtos
@using Root.Application.DTOs.GuideDtos
@using Root.Application.DTOs.UserDtos
@using Root.Domain.Enums
@* Dashboard.razor *@
<div class="container mt-4">
    <h1 class="mb-4">Olá, <span class="text-primary">@CurrentUserFullName</span></h1>
    <div class="row g-4">
        @* Cards principais *@

        @if (CurrentUser.User.Type == UserType.Administrator)
        {
            <div class="col-md-3">
                <div class="card text-white bg-primary h-100 rounded rounded-3">
                    <div class="card-body">
                        <h5 class="card-title">Pacotes</h5>
                        <p class="card-text display-6">@CountPackages</p>
                    </div>
                    <div class="card-footer">
                        <small><i class="bi bi-box"></i> Total cadastrados</small>
                    </div>
                </div>
            </div>
        }

        @if (CurrentUser.User.Type == UserType.Administrator)
        {
            <div class="col-md-3">
                <div class="card text-white bg-primary h-100 rounded rounded-3">
                    <div class="card-body">
                        <h5 class="card-title">Guias</h5>
                        <p class="card-text display-6">@CountGuides</p>
                    </div>
                    <div class="card-footer">
                        <small><i class="bi bi-receipt"></i> Cadastrados</small>
                    </div>
                </div>
            </div>
        }

        @if (CurrentUser.User.Type == UserType.Client)
        {
            <div class="col-md-3">
                <div class="card text-white bg-primary h-100 rounded rounded-3">
                    <div class="card-body">
                        <h5 class="card-title">Reservas <small>(Pendentes)</small></h5>
                        <p class="card-text display-6">@CountMyReserves <small>(@CountPendingReserves)</small></p>
                    </div>
                    <div class="card-footer">
                        <small><i class="bi bi-calendar3"></i> Pacotes Reservados</small>
                    </div>
                </div>
            </div>
        }
        
        @if (CurrentUser.User.Type == UserType.Client)
        {
            <div class="col-md-3">
                <div class="card text-white bg-primary h-100 rounded rounded-3">
                    <div class="card-body">
                        <h5 class="card-title">Pagamentos</h5>
                        <p class="card-text display-6">@CountPayments</p>
                    </div>
                    <div class="card-footer">
                        <small><i class="bi bi-cash"></i> Pagamentos Feitos</small>
                    </div>
                </div>
            </div>
        }

        @if (CurrentUser.User.Type == UserType.Administrator)
        {
            <div class="col-md-3">
                <div class="card text-white bg-primary h-100 rounded rounded-3">
                    <div class="card-body">
                        <h5 class="card-title">Pedidos</h5>
                        <p class="card-text display-6">@CountReserves</p>
                    </div>
                    <div class="card-footer">
                        <small><i class="bi bi-hourglass-split"></i> Aguardando</small>
                    </div>
                </div>
            </div>
        }

        @if (CurrentUser.User.Type == UserType.Administrator)
        {
            <div class="col-md-3">
                <div class="card text-white bg-primary h-100 rounded rounded-3">
                    <div class="card-body">
                        <h5 class="card-title">Clientes</h5>
                        <p class="card-text display-6">@CountClients</p>
                    </div>
                    <div class="card-footer">
                        <small><i class="bi bi-people"></i> Cadastrados</small>
                    </div>
                </div>
            </div>
        }
        
        @if (CurrentUser.User.Type == UserType.Guide)
        {
            <div class="col-md-3">
                <div class="card text-white bg-primary h-100 rounded rounded-3">
                    <div class="card-body">
                        <h5 class="card-title">Trabalhos <small>(Feitos)</small></h5>
                        <p class="card-text display-6">@CountGuideReserve <small>(@CountGuideDoneReserve)</small></p>
                    </div>
                    <div class="card-footer">
                        <small><i class="bi bi-calendar3"></i> Reservas atribuidas</small>
                    </div>
                </div>
            </div>
        }
    </div>

    @* Widgets adicionais 
    <div class="row mt-5 g-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">Próximos Eventos</div>
                <div class="card-body">
                    <ul class="list-group">
                        <li class="list-group-item">📦 Reposição Estoque – 20 Maio</li>
                        <li class="list-group-item">📄 Validade Guia – 22 Maio</li>
                        <li class="list-group-item">👥 Reunião com Clientes – 24 Maio</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card mb-3">
                <div class="card-header">Tours em Andamento</div>
                <div class="card-body">
                    <ul class="list-group">
                        <li class="list-group-item">🏝️ Ilha Mussulo com João</li>
                        <li class="list-group-item">🏞️ Miradouro da Lua com Ana</li>
                        <li class="list-group-item">🏙️ Luanda City Tour com Carlos</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>*@
</div>

@code {
    public LoginListUserDto CurrentUser { get; set; } = new();

    public ListAdminDto? CurrentAdmin { get; set; } = new();
    public ListClientsDto? CurrentClient { get; set; } = new();
    public ListGuidesDto? CurrentGuide { get; set; } = new();

    public string CurrentUserFullName = "";

    public int CountPackages { get; set; } = 0;
    public int CountGuides { get; set; } = 0;
    public int CountPendingReserves { get; set; } = 0;
    public int CountMyReserves { get; set; } = 0;
    public int CountPayments { get; set; } = 0;
    public int CountReserves { get; set; } = 0;
    public int CountClients { get; set; } = 0;
    public int CountGuideReserve { get; set; } = 0;
    public int CountGuideDoneReserve { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await LocalStorage.GetItemAsync("currentUser");
        if (currentUser is null)
        {
            Navigator.NavigateTo("/login");
            return;
        }

        CurrentUser = JsonSerializer.Deserialize<LoginListUserDto>(currentUser) ?? new LoginListUserDto();
        
        if (CurrentUser.User.Type == UserType.Administrator)
            CurrentAdmin = await admins.GetAdminByIdAsync(CurrentUser.UserTypeId);
        if (CurrentUser.User.Type == UserType.Client)
            CurrentClient = await clients.GetClientByIdAsync(CurrentUser.UserTypeId);
        if (CurrentUser.User.Type == UserType.Guide)
            CurrentGuide = await guides.GetGuideByIdAsync(CurrentUser.UserTypeId);

        Console.WriteLine("Admin: " + CurrentUser.UserTypeId);
        Console.WriteLine("Client: " + CurrentClient);
        Console.WriteLine("Guia: " + CurrentGuide);
        LoadStats();
        
        SetCurrentUserFullName();
        StateHasChanged();
    }

    public async void LoadStats()
    {
        CountPackages = (await packages.GetAllPackagesAsync()).Count;
        CountGuides = (await guides.GetAllGuidesAsync()).Count;
        CountPendingReserves = (await reserves.GetAllReservesAsync())
            .Count(p => p.ClientId == CurrentUser.UserTypeId);
        CountMyReserves = (await reserves.GetAllReservesAsync())
            .Count(p => p.ClientId == CurrentUser.UserTypeId);
        CountPayments = (await payments.GetAllPaymentsAsync())
            .Count();
        CountPendingReserves = (await reserves.GetAllReservesAsync())
            .Count(p => p.ReserveStatus == ReserveStatus.Pending && p.ClientId == CurrentUser.UserTypeId);
        CountReserves = (await reserves.GetAllReservesAsync()).Count();
        CountClients = (await clients.GetAllClientsAsync()).Count;
        
        CountGuideReserve = (await reserves.GetAllReservesAsync())
            .Count;
        CountGuideDoneReserve = (await reserves.GetAllReservesAsync())
            .Count(p => p.ReserveStatus == ReserveStatus.Confirmed);
        StateHasChanged();
    }

    public void SetCurrentUserFullName()
    {
        if (CurrentAdmin is not null)
            CurrentUserFullName = string.IsNullOrEmpty(CurrentAdmin.Surname) ? CurrentUser.User.UserName : CurrentAdmin.Name + " " + CurrentAdmin.Surname;
        else if (CurrentGuide is not null)
            CurrentUserFullName = string.IsNullOrEmpty(CurrentGuide.Surname) ? CurrentUser.User.UserName : CurrentGuide.Name + " " + CurrentGuide.Surname;
        else if (CurrentClient is not null)
            CurrentUserFullName = string.IsNullOrEmpty(CurrentClient.Surname) ? CurrentUser.User.UserName : CurrentClient.Name + " " + CurrentClient.Surname;
     }

}