@layout DashboardLayout
@page "/dashboard/guides"
@using Root.Application.DTOs.GuideDtos

<div class="d-flex w-100 flex-row align-content-between">
    <div class="w-75">
        <h3>Guias</h3>
        <small>Gestao de Guias</small>
    </div>
    <div class="d-flex justify-content-end align-items-center w-25">
        <button class="btn btn-primary rounded-pill" @onclick='() => { JS.InvokeVoidAsync("openModal", "newGuiaModal"); }'>
            <i class="bi bi-plus-circle"></i>
            <span>Novo Guia</span>
        </button>
    </div>
</div>

<NewGuideModal OnGuideCreated="async () => { await OnInitializedAsync(); }"></NewGuideModal>

<div class="row g-4 mt-4">
    @foreach (var guide in ListGuide)
    {
        <div class="col-lg-3 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
            <div class="team-item">
                <div class="overflow-hidden">
                    <img class="img-fluid" src="@ImageDataUrl(guide.Image)" alt="">
                </div>
                @* <div class="position-relative d-flex justify-content-center" style="margin-top: -19px;"> *@
                @*     <a class="btn btn-square mx-1" href=""> *@
                @*         <i class="fab fa-facebook-f"></i> *@
                @*     </a> *@
                @*     <a class="btn btn-square mx-1" href=""> *@
                @*         <i class="fab fa-twitter"></i> *@
                @*     </a> *@
                @*     <a class="btn btn-square mx-1" href=""> *@
                @*         <i class="fab fa-instagram"></i> *@
                @*     </a> *@
                @* </div> *@
                <div class="text-center p-4">
                    <h5 class="mb-0">@guide.Name @guide.Surname</h5>
                    <small>@guide.Description</small>
                </div>
            </div>
        </div>
    }
    @if (ListGuide.Count == 0)
    {
        <div class="d-flex w-100 justify-content-center">
            <small>Sem Guias</small>
        </div>
    }
</div>

@code {
    public List<ListGuidesDto> ListGuide { get; set; } = [];

    private string ImageDataUrl(string image) =>
        string.IsNullOrEmpty(image) ? "img/noImage.png" : $"data:image/png;base64,{image}";

    protected override async Task OnInitializedAsync()
    {
        ListGuide = await guides.GetAllGuidesAsync();
        StateHasChanged();
    }

}