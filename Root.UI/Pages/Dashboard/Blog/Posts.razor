@layout DashboardLayout
@page "/dashboard/posts"
@using Root.Application.DTOs.CategoryDtos
@using Root.Application.DTOs.PostDtos
<div class="d-flex w-100 flex-row align-content-between">
    <div class="w-50">
        <h3>Artigos</h3>
        <small>Gestao de artigos do Blog</small>
    </div>
    <div class="d-flex justify-content-end align-items-center w-50 gap-2">
        <button class="btn btn-primary rounded-pill" @onclick='() => { Navigator.NavigateTo("dashboard/post/new"); }'>
            <i class="bi bi-plus-circle"></i>
            <span>Novo Artigo</span>
        </button>
        <button class="btn btn-primary rounded-pill" @onclick='() => { JS.InvokeVoidAsync("openModal", "categoriesModal"); }'>
            <i class="bi bi-tag-fill"></i>
            <span>Categorias</span>
        </button>
    </div>
</div>

<div class="row g-4 mt-4">
    @foreach (var post in ListPosts)
    {
        <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
            <div class="team-item">
                @* Pode trocar o nome da classe depois para algo como blog-post *@
                <div class="overflow-hidden">
                    <img class="img-fluid" src="@ImageDataUrl(post.Image)" alt="Imagem da postagem">
                </div>
                <div class="text-center p-4">
                    <h5 class="mb-2">@post.Title</h5>
                    <p class="d-flex">
                        @foreach (var cat in post.CategoryNames)
                        {
                            <span class="badge bg-primary rounded-pill px-2">
                                <span>@cat</span>
                            </span>
                        }
                    </p>
                    <a class="btn btn-sm btn-outline-primary" href="/posts/@post.Id">Editar Artigo</a>
                </div>
            </div>
        </div>
    }
    @if (ListPosts.Count == 0)
    {
        <div class="d-flex w-100 justify-content-center">
            <small>Sem postagens dispon√≠veis</small>
        </div>
    }
</div>


<CategoriesModals></CategoriesModals>

@code {
    public List<ListPostDto> ListPosts { get; set; } = [];
    public List<ListCategoryDto> ListCategory { get; set; } = [];

    private string ImageDataUrl(string image) =>
        string.IsNullOrEmpty(image) ? "img/noImage.png" : $"data:image/png;base64,{image}";

    protected override async Task OnInitializedAsync()
    {
        ListPosts = await posts.GetAllPostsAsync();
        ListCategory = await posts.GetAllCategoriesAsync();
        StateHasChanged();
    }

}